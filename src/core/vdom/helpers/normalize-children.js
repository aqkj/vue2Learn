/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
export function simpleNormalizeChildren (children: any) {
  // 遍历子元素
  for (let i = 0; i < children.length; i++) {
    // 判断如果当前child是数组的话，则将chilren合并后返回一个新的数组
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  // 直接返回children
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
/**
 * 规范化子数组
 * @param {any} children 子元素
 */
export function normalizeChildren (children: any): ?Array<VNode> {
  /**
   * 判断children是否为原始类型
   * 创建textVnode并且包成数组
   * 如果非原始类型，非数组则返回undefined，如果是数组
   * 规范化子元素数组
   */
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}
/**
 * 判断是否是文本元素
 * @param {*} node
 */
function isTextNode (node): boolean {
  // 判断node是否存在，并且有text属性，并且iscomment为false
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}
/**
 * 规范化子原属数组
 * @param {any} children 子元素数组
 * @param {string} nestedIndex 嵌套数组
 */
function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  // 设置暂存
  const res = []
  let i, c, lastIndex, last
  // 遍历子元素
  for (i = 0; i < children.length; i++) {
    // 获取对应子元素
    c = children[i]
    // 判断子元素是否非定义，或者是boolean类型，则跳过
    if (isUndef(c) || typeof c === 'boolean') continue
    // 获取最后的索引为当前res长度-1
    lastIndex = res.length - 1
    // 获取上一个
    last = res[lastIndex]
    //  nested
    // 判断当前元素是否为数组
    if (Array.isArray(c)) {
      // 并且长度大于0
      if (c.length > 0) {
        // 递归调用规范化数组
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // merge adjacent text nodes
        // 判断第一个是否为textNode并且上一个也是为textNode
        if (isTextNode(c[0]) && isTextNode(last)) {
          // 拼接合并上一个和当前获取的第一个textnode
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          // 清除当前获取的第一个
          c.shift()
        }
        // 将当前获取的插入res
        res.push.apply(res, c)
      }
    } else if (isPrimitive(c)) { // 判断当前是否为原始类型
      if (isTextNode(last)) { // 判断上一个的是否是文本元素
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        // 如果上一个也是textnode,当前也是原始类型，则合并文本成一个新的textNode
        res[lastIndex] = createTextVNode(last.text + c) // 为元素类型的话
      } else if (c !== '') { // 如果当前不为空字符串
        // convert primitive to vnode
        res.push(createTextVNode(c))  // 创建textNode并插入res
      }
    } else {
      // 如果当前是text节点并且上一个也是text节点
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text) // 当前的节点和上一个合并成一个text节点
      } else {
        // default key for nested array children (likely generated by v-for)
        // 暂时还不知道干啥的，可能是v-for方面的
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c) // 其他情况则直接插入
      }
    }
  }
  return res
}
